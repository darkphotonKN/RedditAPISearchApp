{"dependencies":[{"name":"C:\\Users\\Kranti\\WebstormProjects\\Web Design\\Projects\\RedditSearchApp\\package.json","includedInParent":true,"mtime":1527595968979}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\n// Using Reddit API to make a search function for the application\n\n/*\r\nfetch() method usage NOTES\r\n---------------------------\r\n\r\nThe \"fetch()\" method takes one mandatory argument, the path to the resource\r\nyou want to fetch. It returns a \"Promise\" that resolves to the \"Response\" to that\r\nrequest, whether or not it is successful. You can optionally pass in an init options \r\nobject as a second argument.\r\n\r\nOnce a \"Response\" is retrieved, there are a number of methods available \r\nto define what the body content is and how it should be handled. \r\n\r\nYou can create a request and response directly using the \"Request()\" and \r\n\"Response\" constructors, but are unlikely to do this directly. These are more likely to be \r\ncreated as results of other API actions (for example, FetchEvent.respondWidth) from \r\nservice workers).\r\n\r\n*/\n\nexports.default = {\n\n    search: function search(searchTerm, searchLimit, sortBy) {\n        return fetch(\"http://www.reddit.com/search.json?q=\" + searchTerm + \"&sort=\" + sortBy + \"&limit=\" + searchLimit) // ? - allows use url para parameter, q - query\n        .then(function (res) {\n            return res.json();\n        }) // it gives us the response, we want the response in JSON\n        .then(function (data) {\n            return data.data.children.map(function (data) {\n                return data.data;\n            });\n        }) // gives us the data\n        .catch(function (err) {\n            return console.log(err);\n        });\n    }\n\n    // solutions of problem  \n\n\n};","map":{"mappings":[{"generated":{"line":7,"column":0},"source":"redditapi.js","original":{"line":2,"column":0}},{"generated":{"line":9,"column":0},"source":"redditapi.js","original":{"line":4,"column":0}},{"generated":{"line":28,"column":18},"source":"redditapi.js","original":{"line":23,"column":15}},{"name":"search","generated":{"line":30,"column":0},"source":"redditapi.js","original":{"line":25,"column":4}},{"generated":{"line":30,"column":12},"source":"redditapi.js","original":{"line":25,"column":12}},{"name":"searchTerm","generated":{"line":30,"column":28},"source":"redditapi.js","original":{"line":25,"column":21}},{"generated":{"line":30,"column":38},"source":"redditapi.js","original":{"line":25,"column":12}},{"name":"searchLimit","generated":{"line":30,"column":40},"source":"redditapi.js","original":{"line":25,"column":33}},{"generated":{"line":30,"column":51},"source":"redditapi.js","original":{"line":25,"column":12}},{"name":"sortBy","generated":{"line":30,"column":53},"source":"redditapi.js","original":{"line":25,"column":46}},{"generated":{"line":30,"column":59},"source":"redditapi.js","original":{"line":25,"column":12}},{"generated":{"line":30,"column":61},"source":"redditapi.js","original":{"line":25,"column":54}},{"generated":{"line":31,"column":0},"source":"redditapi.js","original":{"line":26,"column":8}},{"name":"fetch","generated":{"line":31,"column":15},"source":"redditapi.js","original":{"line":26,"column":15}},{"name":"searchTerm","generated":{"line":31,"column":62},"source":"redditapi.js","original":{"line":26,"column":60}},{"generated":{"line":31,"column":72},"source":"redditapi.js","original":{"line":26,"column":15}},{"name":"sortBy","generated":{"line":31,"column":86},"source":"redditapi.js","original":{"line":26,"column":79}},{"generated":{"line":31,"column":92},"source":"redditapi.js","original":{"line":26,"column":15}},{"name":"searchLimit","generated":{"line":31,"column":107},"source":"redditapi.js","original":{"line":26,"column":95}},{"generated":{"line":31,"column":118},"source":"redditapi.js","original":{"line":26,"column":15}},{"generated":{"line":31,"column":120},"source":"redditapi.js","original":{"line":26,"column":110}},{"generated":{"line":32,"column":0},"source":"redditapi.js","original":{"line":26,"column":15}},{"name":"then","generated":{"line":32,"column":9},"source":"redditapi.js","original":{"line":27,"column":9}},{"generated":{"line":32,"column":13},"source":"redditapi.js","original":{"line":26,"column":15}},{"generated":{"line":32,"column":14},"source":"redditapi.js","original":{"line":27,"column":14}},{"generated":{"line":33,"column":0},"source":"redditapi.js","original":{"line":27,"column":14}},{"name":"res","generated":{"line":33,"column":19},"source":"redditapi.js","original":{"line":27,"column":21}},{"name":"json","generated":{"line":33,"column":23},"source":"redditapi.js","original":{"line":27,"column":25}},{"generated":{"line":33,"column":27},"source":"redditapi.js","original":{"line":27,"column":21}},{"generated":{"line":33,"column":29},"source":"redditapi.js","original":{"line":27,"column":14}},{"generated":{"line":34,"column":0},"source":"redditapi.js","original":{"line":27,"column":14}},{"generated":{"line":34,"column":9},"source":"redditapi.js","original":{"line":26,"column":15}},{"generated":{"line":34,"column":11},"source":"redditapi.js","original":{"line":27,"column":33}},{"generated":{"line":35,"column":0},"source":"redditapi.js","original":{"line":26,"column":15}},{"name":"then","generated":{"line":35,"column":9},"source":"redditapi.js","original":{"line":28,"column":9}},{"generated":{"line":35,"column":13},"source":"redditapi.js","original":{"line":26,"column":15}},{"generated":{"line":35,"column":14},"source":"redditapi.js","original":{"line":28,"column":14}},{"generated":{"line":36,"column":0},"source":"redditapi.js","original":{"line":28,"column":14}},{"name":"data","generated":{"line":36,"column":19},"source":"redditapi.js","original":{"line":28,"column":22}},{"name":"data","generated":{"line":36,"column":24},"source":"redditapi.js","original":{"line":28,"column":27}},{"generated":{"line":36,"column":28},"source":"redditapi.js","original":{"line":28,"column":22}},{"name":"children","generated":{"line":36,"column":29},"source":"redditapi.js","original":{"line":28,"column":32}},{"generated":{"line":36,"column":37},"source":"redditapi.js","original":{"line":28,"column":22}},{"name":"map","generated":{"line":36,"column":38},"source":"redditapi.js","original":{"line":28,"column":41}},{"generated":{"line":36,"column":41},"source":"redditapi.js","original":{"line":28,"column":22}},{"generated":{"line":36,"column":42},"source":"redditapi.js","original":{"line":28,"column":45}},{"generated":{"line":37,"column":0},"source":"redditapi.js","original":{"line":28,"column":45}},{"name":"data","generated":{"line":37,"column":23},"source":"redditapi.js","original":{"line":28,"column":53}},{"name":"data","generated":{"line":37,"column":28},"source":"redditapi.js","original":{"line":28,"column":58}},{"generated":{"line":37,"column":32},"source":"redditapi.js","original":{"line":28,"column":45}},{"generated":{"line":38,"column":0},"source":"redditapi.js","original":{"line":28,"column":45}},{"generated":{"line":38,"column":13},"source":"redditapi.js","original":{"line":28,"column":22}},{"generated":{"line":38,"column":14},"source":"redditapi.js","original":{"line":28,"column":14}},{"generated":{"line":39,"column":0},"source":"redditapi.js","original":{"line":28,"column":14}},{"generated":{"line":39,"column":9},"source":"redditapi.js","original":{"line":26,"column":15}},{"generated":{"line":39,"column":11},"source":"redditapi.js","original":{"line":28,"column":65}},{"generated":{"line":40,"column":0},"source":"redditapi.js","original":{"line":26,"column":15}},{"name":"catch","generated":{"line":40,"column":9},"source":"redditapi.js","original":{"line":29,"column":9}},{"generated":{"line":40,"column":14},"source":"redditapi.js","original":{"line":26,"column":15}},{"generated":{"line":40,"column":15},"source":"redditapi.js","original":{"line":29,"column":15}},{"generated":{"line":41,"column":0},"source":"redditapi.js","original":{"line":29,"column":15}},{"name":"console","generated":{"line":41,"column":19},"source":"redditapi.js","original":{"line":29,"column":22}},{"name":"log","generated":{"line":41,"column":27},"source":"redditapi.js","original":{"line":29,"column":30}},{"generated":{"line":41,"column":30},"source":"redditapi.js","original":{"line":29,"column":22}},{"name":"err","generated":{"line":41,"column":31},"source":"redditapi.js","original":{"line":29,"column":34}},{"generated":{"line":41,"column":34},"source":"redditapi.js","original":{"line":29,"column":22}},{"generated":{"line":41,"column":35},"source":"redditapi.js","original":{"line":29,"column":15}},{"generated":{"line":42,"column":0},"source":"redditapi.js","original":{"line":29,"column":15}},{"generated":{"line":42,"column":9},"source":"redditapi.js","original":{"line":26,"column":15}},{"generated":{"line":42,"column":10},"source":"redditapi.js","original":{"line":26,"column":8}},{"generated":{"line":43,"column":0},"source":"redditapi.js","original":{"line":30,"column":5}},{"generated":{"line":45,"column":0},"source":"redditapi.js","original":{"line":32,"column":4}},{"generated":{"line":48,"column":0},"source":"redditapi.js","original":{"line":23,"column":15}}],"sources":{"redditapi.js":"\r\n// Using Reddit API to make a search function for the application\r\n\r\n/*\r\nfetch() method usage NOTES\r\n---------------------------\r\n\r\nThe \"fetch()\" method takes one mandatory argument, the path to the resource\r\nyou want to fetch. It returns a \"Promise\" that resolves to the \"Response\" to that\r\nrequest, whether or not it is successful. You can optionally pass in an init options \r\nobject as a second argument.\r\n\r\nOnce a \"Response\" is retrieved, there are a number of methods available \r\nto define what the body content is and how it should be handled. \r\n\r\nYou can create a request and response directly using the \"Request()\" and \r\n\"Response\" constructors, but are unlikely to do this directly. These are more likely to be \r\ncreated as results of other API actions (for example, FetchEvent.respondWidth) from \r\nservice workers).\r\n\r\n*/\r\n\r\nexport default {\r\n    \r\n    search: function(searchTerm, searchLimit, sortBy) {\r\n        return fetch(`http://www.reddit.com/search.json?q=${searchTerm}&sort=${sortBy}&limit=${searchLimit}`) // ? - allows use url para parameter, q - query\r\n        .then(res => res.json()) // it gives us the response, we want the response in JSON\r\n        .then(data => data.data.children.map(data => data.data)) // gives us the data\r\n        .catch(err => console.log(err)); \r\n    }\r\n\r\n    // solutions of problem  \r\n\r\n    \r\n\r\n\r\n}"},"lineCount":null}},"hash":"fb488f81d4dbb6697a77f3b53d41c856","cacheData":{"env":{}}}