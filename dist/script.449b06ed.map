{"version":3,"sources":["redditapi.js","script.js"],"names":["search","searchTerm","searchLimit","sortBy","fetch","then","res","json","console","log","data","searchForm","document","getElementById","searchInput","querySelector","addEventListener","e","value","showMessage","reddit","preventDefault","message","className","div","createElement","appendChild","createTextNode","classList","add","errorOutput","innerHTML"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;kBAmBe;;AAEXA,YAAQ,gBAASC,UAAT,EAAqBC,WAArB,EAAkCC,MAAlC,EAA0C;AAC9CC,uDAA6CH,UAA7C,EAA2D;AAA3D,SACCI,IADD,CACM;AAAA,mBAAOC,IAAIC,IAAJ,EAAP;AAAA,SADN,EACyB;AADzB,SAECF,IAFD,CAEM;AAAA,mBAAQG,QAAQC,GAAR,CAAYC,IAAZ,CAAR;AAAA,SAFN,EAD8C,CAGZ;AACrC;AACL;AAPerBf;;;;;;AAEA,IAAMC,aAAaC,SAASC,cAAT,CAAwB,aAAxB,CAAnB,EAHA;;AAIA,IAAMC,cAAcF,SAASG,aAAT,CAAuB,eAAvB,CAApB;;AAEA;AACAJ,WAAWK,gBAAX,CAA4B,QAA5B,EAAsC,UAACC,CAAD,EAAO;AACzC;AACA,QAAMhB,aAAaa,YAAYI,KAA/B;AACA;AACA,QAAMf,SAASS,SAASG,aAAT,CAAuB,6BAAvB,EAAsDG,KAArE;AACA;AACA,QAAMhB,cAAcU,SAASC,cAAT,CAAwB,OAAxB,EAAiCK,KAArD;;AAEA;AACA,QAAGjB,eAAa,EAAhB,EAAoB;;AAEhBkB,oBAAY,yBAAZ,EAAuC,gBAAvC;AACH;;AAED;AACAL,gBAAYI,KAAZ,GAAoB,EAApB;;AAEA;AACAE,wBAAOpB,MAAP,CAAcC,UAAd,EAA0BC,WAA1B,EAAuCC,MAAvC;;AAEAc,MAAEI,cAAF;;AAEA;AACA;AACH,CAxBD;;AA2BA,SAASF,WAAT,CAAqBG,OAArB,EAA8BC,SAA9B,EAAyC;;AAErC;AACA,QAAMC,MAAMZ,SAASa,aAAT,CAAuB,KAAvB,CAAZ;;AAEA;AACAD,QAAIE,WAAJ,CAAgBd,SAASe,cAAT,CAAwBL,OAAxB,CAAhB;AACAE,QAAII,SAAJ,CAAcC,GAAd,CAAkB,eAAlB;AACA;AACA;AACA,QAAMC,cAAclB,SAASC,cAAT,CAAwB,QAAxB,CAApB;;AAGA;AACA;AACAiB,gBAAYC,SAAZ,GAAwB,OAAxB;AACA;AACAD,gBAAYJ,WAAZ,CAAwBF,GAAxB;AACAM,gBAAYF,SAAZ,CAAsBC,GAAtB,CAA0BN,SAA1B;AACH","file":"script.449b06ed.map","sourceRoot":"..","sourcesContent":["\r\n// Using Reddit API to make a search function for the application\r\n\r\n/*\r\nfetch() method usage NOTES\r\n---------------------------\r\n\r\nThe \"fetch()\" method takes one mandatory argument, the path to the resource\r\nyou want to fetch. It returns a \"Promise\" that resolves to the \"Response\" to that\r\nrequest, whether or not it is successful. You can optionally pass in an init options \r\nobject as a second argument.\r\n\r\nOnce a \"Response\" is retrieved, there are a number of methods available \r\nto define what the body content is and how it should be handled. \r\n\r\nYou can create a request and response directly using the \"Request()\" and \r\n\"Response\" constructors, but are unlikely to do this directly. These are more likely to be \r\ncreated as results of other API actions (for example, FetchEvent.respondWidth) from \r\nservice workers).\r\n\r\n*/\r\n\r\nexport default {\r\n\r\n    search: function(searchTerm, searchLimit, sortBy) {\r\n        fetch(`http://www.reddit.com/search.json?q=${searchTerm}`) // ? - allows use url para parameter, q - query\r\n        .then(res => res.json()) // it gives us the response, we want the response in JSON\r\n        .then(data => console.log(data)); // gives us the data\r\n    }\r\n// solutions of problem  \r\n}","// js file using reddit api\r\nimport reddit from './redditapi';\r\n\r\nconst searchForm = document.getElementById('search-form');\r\nconst searchInput = document.querySelector('.search-input');\r\n\r\n// 'submit' - if form is submitted, perform callback \r\nsearchForm.addEventListener('submit', (e) => {\r\n    // get search term \r\n    const searchTerm = searchInput.value;\r\n    // get radio check boxes\r\n    const sortBy = document.querySelector('input[class=\"sort\"]:checked').value;\r\n    // get limit\r\n    const searchLimit = document.getElementById('limit').value;\r\n\r\n    // check search field is not empty\r\n    if(searchTerm===\"\") {\r\n\r\n        showMessage('Please add search term!', 'alert-messages');\r\n    }\r\n\r\n    // clear search input\r\n    searchInput.value = \"\";\r\n\r\n    // search Reddit using Reddit API, separate JS file\r\n    reddit.search(searchTerm, searchLimit, sortBy);\r\n    \r\n    e.preventDefault();\r\n\r\n    // testing\r\n    // console.log();\r\n}); \r\n\r\n\r\nfunction showMessage(message, className) {\r\n    \r\n    // create div to hold message \r\n    const div = document.createElement('div');\r\n    \r\n    // insert error message\r\n    div.appendChild(document.createTextNode(message));\r\n    div.classList.add(\"error-message\");\r\n    // insert into DOM\r\n    // get parent\r\n    const errorOutput = document.getElementById('errors');\r\n\r\n\r\n    // styling to display message\r\n    // clear error box and put \"error\"\r\n    errorOutput.innerHTML = \"Error\";\r\n    // append error message into div\r\n    errorOutput.appendChild(div);\r\n    errorOutput.classList.add(className);\r\n}"]}